include_recipe "build-server::cobbler-common"

template "/etc/cobbler/settings" do
  source "etc/cobbler/settings-build-server.erb"
  variables({
    ipaddress: node[:ipaddress]
  })
  notifies :restart, "service[cobblerd]"
end

Dhcp_subnets = node[:network][:interfaces].select {|k,v| v[:routes]}.values.flat_map do |iface|
  gateway = iface[:routes].select {|r| r[:destination] == "default" }.map {|gr| gr[:via] }
  iface[:addresses].select {|k,v| v[:family] == "inet"}.map do |k,v|
    mask = v[:netmask]
    addr = IPAddr.new(k).mask mask
    {addr: addr, mask: v[:netmask]}.merge (gateway.empty? ? {} : {gateway: gateway[0]})
  end
end

template "/etc/cobbler/dhcp.template" do
  source "etc/cobbler/dhcp.template.erb"
  
  # this needs to be across all eths.  soon.
  variables subnets: Dhcp_subnets
end

# XXX once master is set up, we need to replicate here.


# Always run this -- two reasons:
# a.) during initial bootstrap, this *has* to run before we enable dhcpd
# b.) this way we can't have lingering unsynched changes for longer than one chef run
bash "cobbler sync" do
  code "cobbler sync"
  action :run
  notifies :restart, "service[dhcpd]"
end

# Cannot be started until after dhcpd.conf has been generated by previous
service "dhcpd" do
  action [:enable, :start]
end

xinetd_service "tftp" do
  id "tftp"
  socket_type "dgram"
  protocol "udp"
  wait true
  user "root"
  server "/usr/sbin/in.tftpd"
  server_args "-B 1380 -v -s /var/lib/tftpboot"
  per_source "11"
  cps "100 2"
  flags "IPv4"

  action :enable
end

cookbook_file '/apps/hft/bin/hftbuild-geniso' do
  source 'apps/hft/bin/hftbuild-geniso'
  owner 'root'
  group 'root'
  mode 0754
  action :create
end

